import logging
from telebot import TeleBot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import TELEGRAM_TOKEN, PROXY_URL
from database import (
    init_db, add_user, get_user, remove_user, is_admin, make_admin, get_all_users, has_admins,
    add_series, remove_series, update_series, get_series, get_all_series, series_exists
)
from rutracker_client import RutrackerClient
from qbittorrent_client import QBittorrentClient

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = TeleBot(TELEGRAM_TOKEN)
rutracker = RutrackerClient()
qbittorrent = QBittorrentClient()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è (–∫–æ–Ω–µ—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç)
class State:
    IDLE = 0
    WAITING_FOR_URL = 1
    WAITING_FOR_USER_ID = 2
    WAITING_FOR_ADMIN_ID = 3
    WAITING_FOR_USER_ID_TO_DELETE = 4

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def admin_required(func):
    def wrapper(message, *args, **kwargs):
        user_id = message.from_user.id
        
        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ—Ç, —Ç–æ –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if not has_admins():
            user = get_user(user_id)
            if not user:
                add_user(user_id, message.from_user.username or str(user_id), is_admin=True)
                bot.send_message(
                    message.chat.id,
                    "–í—ã —Å—Ç–∞–ª–∏ –ø–µ—Ä–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                )
            else:
                make_admin(user_id)
                bot.send_message(
                    message.chat.id,
                    "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                )
            return func(message, *args, **kwargs)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if not is_admin(user_id):
            bot.send_message(
                message.chat.id,
                "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return
        
        return func(message, *args, **kwargs)
    
    return wrapper

@bot.message_handler(commands=['start'])
@admin_required
def handle_start(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞ RuTracker.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–∞–∑–¥–∞—á–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )
    user_states[message.from_user.id] = State.IDLE
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

@bot.message_handler(commands=['help'])
@admin_required
def handle_help(message):
    help_text = (
        "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤\n"
        "/force_dl - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Ç–æ—Ä—Ä–µ–Ω—Ç—ã\n"
        "/force_cl - –û—á–∏—Å—Ç–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é 'from telegram' –≤ qBittorrent\n"
        "/add - –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–∏–∞–ª –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
        "/users - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n" 
        "/adduser - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/deluser - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/addadmin - –°–¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
        "/force_chk - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫\n"
    )
    bot.send_message(message.chat.id, help_text)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É")

@bot.message_handler(commands=['list'])
@admin_required
def handle_list(message):
    series_list = get_all_series()
    if not series_list:
        bot.send_message(message.chat.id, "–ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–∏–∞–ª–æ–≤ (–ø—É—Å—Ç–æ)")
        return

    markup = InlineKeyboardMarkup()
    for series in series_list:
        series_id, url, title, created, edited, last_updated, added_by, added_at = series
        button_text = f"{title} (–û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_updated})"
        markup.add(InlineKeyboardButton(button_text, callback_data=f"series_{series_id}"))

    bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤:", reply_markup=markup)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–∏–∞–ª–æ–≤")

@bot.callback_query_handler(func=lambda call: call.data.startswith('series_'))
@admin_required
def handle_series_callback(call):
    series_id = int(call.data.split('_')[1])
    series = get_series(series_id=series_id)
    if not series:
        bot.send_message(call.message.chat.id, "–°–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    series_id, url, title, created, edited, last_updated, added_by, added_at = series
    
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"update_{series_id}"))
    markup.add(InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{series_id}"))
    markup.add(InlineKeyboardButton("üîó –°—Å—ã–ª–∫–∞", url=url))
    markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_list"))
    
    bot.edit_message_text(
        f"–°–µ—Ä–∏—è: {title}\n"
        f"–°–æ–∑–¥–∞–Ω–∞: {created}\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {edited}\n"
        f"–î–æ–±–∞–≤–ª–µ–Ω–∞: {added_at}",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
@admin_required
def handle_delete_callback(call):
    series_id = int(call.data.split('_')[1])
    
    # –¢–µ–≥ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞
    tag = f"id_{series_id}"
    
    # –£–¥–∞–ª—è–µ–º —Å–µ—Ä–∏–∞–ª –∏–∑ –ë–î
    if remove_series(series_id=series_id):
        # –£–¥–∞–ª—è–µ–º —Ç–æ—Ä—Ä–µ–Ω—Ç –ø–æ —Ç–µ–≥—É
        if qbittorrent.delete_torrent_by_tag(tag, delete_files=False):
            bot.answer_callback_query(call.id, "–°–µ—Ä–∏–∞–ª –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–æ—Ä—Ä–µ–Ω—Ç —É–¥–∞–ª–µ–Ω—ã.")
        else:
            bot.answer_callback_query(call.id, "–°–µ—Ä–∏–∞–ª —É–¥–∞–ª–µ–Ω, –Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–æ—Ä—Ä–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
        handle_list_callback(call)
    else:
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–µ—Ä–∏–∞–ª.")

@bot.callback_query_handler(func=lambda call: call.data == 'back_to_list')
@admin_required
def handle_list_callback(call):
    series_list = get_all_series()
    if not series_list:
        bot.edit_message_text(
            "–ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤.",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id
        )
        return

    markup = InlineKeyboardMarkup()
    for series in series_list:
        series_id, url, title, created, edited, last_updated, added_by, added_at = series
        button_text = f"{title} (–û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_updated})"
        markup.add(InlineKeyboardButton(button_text, callback_data=f"series_{series_id}"))

    bot.edit_message_text(
        "–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤:",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup
    )

@bot.message_handler(commands=['status'])
@admin_required
def handle_status(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RuTracker
    rutracker_status = "–£—Å–ø–µ—à–Ω–æ" if rutracker.check_connection() else "–û—à–∏–±–∫–∞"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ qBittorrent
    qbittorrent_status = "–£—Å–ø–µ—à–Ω–æ" if qbittorrent.connect() else "–û—à–∏–±–∫–∞"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏
    proxy_status = "–ù–∞—Å—Ç—Ä–æ–µ–Ω" if PROXY_URL else "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    status_message = (
        f"–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n"
        f"RuTracker: {rutracker_status}\n"
        f"–ü—Ä–æ–∫—Å–∏: {proxy_status}\n"
        f"qBittorrent: {qbittorrent_status}"
    )
    bot.send_message(message.chat.id, status_message)

@bot.message_handler(commands=['force_chk'])
@admin_required
def handle_force_chk(message):
    bot.send_message(message.chat.id, "–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
    
    series_list = get_all_series()
    if not series_list:
        bot.send_message(message.chat.id, "–ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤.")
        return
    
    for series in series_list:
        series_id, url, title, created, edited, last_updated, added_by, added_at = series
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        page_info = rutracker.get_page_info(url)
        if not page_info:
            bot.send_message(message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {title}")
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ –≤—Ä–µ–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if page_info["edited"] != edited:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–≥—Ä—É–∑–∫—É –≤ qBittorrent
            tag = f"id_{series_id}"
            qbittorrent.delete_torrent_by_tag(tag, delete_files=False)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            update_series(series_id, title=page_info["title"], created=page_info["created"], edited=page_info["edited"], last_updated=page_info["edited"])
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ—Ä—Ä–µ–Ω—Ç
            torrent_data = rutracker.download_torrent(page_info["topic_id"])
            if torrent_data and qbittorrent.add_torrent(torrent_data, page_info["title"], tags=tag):
                bot.send_message(message.chat.id, f"–°–µ—Ä–∏–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω: {title}")
            else:
                bot.send_message(message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–∏–∞–ª: {title}")
    bot.send_message(message.chat.id, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
