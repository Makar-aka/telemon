import logging
from telebot import TeleBot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import TELEGRAM_TOKEN
from database import get_all_series, update_series, add_series, remove_series, get_all_users, add_user, remove_user, make_admin
from rutracker_client import RutrackerClient
from qbittorrent_client import QBittorrentClient

logger = logging.getLogger(__name__)
bot = TeleBot(TELEGRAM_TOKEN)
rutracker = RutrackerClient()
qbittorrent = QBittorrentClient()

@bot.message_handler(commands=['start', 'help'])
def handle_start_help(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞ RuTracker.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–∏–∞–ª–æ–≤\n"
        "/add - –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–∏–∞–ª\n"
        "/del - –£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–∏–∞–ª\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
        "/force_chk - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π\n"
        "/users - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
        "/adduser - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/deluser - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/addadmin - –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    )

@bot.message_handler(commands=['list'])
def handle_list(message):
    series_list = get_all_series()
    if not series_list:
        bot.send_message(message.chat.id, "–ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤.")
        return

    markup = InlineKeyboardMarkup()
    for series in series_list:
        series_id, url, title, _, _, last_updated, _, _ = series
        button_text = f"{title} (–û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_updated})"
        markup.add(InlineKeyboardButton(button_text, callback_data=f"series_{series_id}"))

    bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤:", reply_markup=markup)

@bot.message_handler(commands=['add'])
def handle_add(message):
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞–∑–¥–∞—á—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
    # –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–¥–∞—á–∏

@bot.message_handler(commands=['del'])
def handle_del(message):
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID —Å–µ—Ä–∏–∞–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    # –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–∑–¥–∞—á–∏

@bot.message_handler(commands=['status'])
def handle_status(message):
    status_message = (
        f"–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n"
        f"RuTracker: {'–£—Å–ø–µ—à–Ω–æ' if rutracker.is_logged_in else '–û—à–∏–±–∫–∞'}\n"
        f"qBittorrent: {'–£—Å–ø–µ—à–Ω–æ' if qbittorrent.client else '–û—à–∏–±–∫–∞'}"
    )
    bot.send_message(message.chat.id, status_message)

@bot.message_handler(commands=['force_chk'])
def handle_force_chk(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
    # –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏

@bot.message_handler(commands=['users'])
def handle_users(message):
    users = get_all_users()
    if not users:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    user_list = "\n".join([f"{user[0]}: {user[1]} (Admin: {'–î–∞' if user[2] else '–ù–µ—Ç'})" for user in users])
    bot.send_message(message.chat.id, f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{user_list}")

@bot.message_handler(commands=['adduser'])
def handle_adduser(message):
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
    # –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@bot.message_handler(commands=['deluser'])
def handle_deluser(message):
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    # –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@bot.message_handler(commands=['addadmin'])
def handle_addadmin(message):
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    # –õ–æ–≥–∏–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

@bot.callback_query_handler(func=lambda call: call.data.startswith('series_'))
def handle_series_callback(call):
    series_id = int(call.data.split('_')[1])
    series = get_all_series(series_id=series_id)
    if not series:
        bot.send_message(call.message.chat.id, "–°–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    series_id, url, title, _, _, last_updated, _, _ = series
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"update_{series_id}"))
    markup.add(InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{series_id}"))
    bot.edit_message_text(
        f"–°–µ—Ä–∏–∞–ª: {title}\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_updated}",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('update_'))
def handle_update_callback(call):
    series_id = int(call.data.split('_')[1])
    series = get_all_series(series_id=series_id)
    if not series:
        bot.answer_callback_query(call.id, "–°–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    _, url, title, _, _, last_updated, _, _ = series
    page_info = rutracker.get_page_info(url)
    if not page_info:
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
        return

    if page_info["time_text"] != last_updated:
        update_series(series_id, title=page_info["title"], last_updated=page_info["time_text"])
        bot.answer_callback_query(call.id, "–°–µ—Ä–∏–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω.")
    else:
        bot.answer_callback_query(call.id, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç.")