import logging
from telebot import TeleBot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import TELEGRAM_TOKEN
from database import (
    init_db, add_user, get_user, remove_user, is_admin, make_admin, get_all_users, has_admins,
    add_series, remove_series, update_series, get_series, get_all_series, series_exists
)
from rutracker_client import RutrackerClient
from qbittorrent_client import QBittorrentClient

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = TeleBot(TELEGRAM_TOKEN)
rutracker = RutrackerClient()
qbittorrent = QBittorrentClient()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è (–∫–æ–Ω–µ—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç)
class State:
    IDLE = 0
    WAITING_FOR_URL = 1
    WAITING_FOR_USER_ID = 2
    WAITING_FOR_ADMIN_ID = 3
    WAITING_FOR_USER_ID_TO_DELETE = 4

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def admin_required(func):
    def wrapper(message, *args, **kwargs):
        user_id = message.from_user.id
        
        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ—Ç, —Ç–æ –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if not has_admins():
            user = get_user(user_id)
            if not user:
                add_user(user_id, message.from_user.username or str(user_id), is_admin=True)
                bot.send_message(
                    message.chat.id,
                    "–í—ã —Å—Ç–∞–ª–∏ –ø–µ—Ä–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                )
            else:
                make_admin(user_id)
                bot.send_message(
                    message.chat.id,
                    "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                )
            return func(message, *args, **kwargs)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if not is_admin(user_id):
            bot.send_message(
                message.chat.id,
                "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return
        
        return func(message, *args, **kwargs)
    
    return wrapper

@bot.message_handler(commands=['start'])
@admin_required
def handle_start(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞ RuTracker.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–∞–∑–¥–∞—á–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )
    user_states[message.from_user.id] = State.IDLE
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

@bot.message_handler(commands=['help'])
@admin_required
def handle_help(message):
    help_text = (
        "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤\n"
        "/force_dl - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Ç–æ—Ä—Ä–µ–Ω—Ç—ã\n"
        "/force_cl - –û—á–∏—Å—Ç–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é 'from telegram' –≤ qBittorrent\n"
        "/add - –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–∏–∞–ª –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
        "/users - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n" 
        "/adduser - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/deluser - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/addadmin - –°–¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
    )
    bot.send_message(message.chat.id, help_text)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É")


@bot.message_handler(commands=['list'])
@admin_required
def handle_list(message):
    series_list = get_all_series()
    if not series_list:
        bot.send_message(message.chat.id, "–ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–∏–∞–ª–æ–≤ (–ø—É—Å—Ç–æ)")
        return

    logger.info(f"–°–ø–∏—Å–æ–∫ —Å–µ—Ä–∏–∞–ª–æ–≤: {series_list}")  # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã

    markup = InlineKeyboardMarkup()
    for series in series_list:
        series_id, url, title, last_updated, added_by, added_at = series
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ "/"
        title_part = title.split('/')[0].strip()
        
        button_text = f"{title_part} - {last_updated}"
        markup.add(InlineKeyboardButton(button_text, callback_data=f"series_{series_id}"))

    bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤:", reply_markup=markup)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–∏–∞–ª–æ–≤")


@bot.message_handler(commands=['force_dl'])
@admin_required
def handle_force_dl(message):
    bot.send_message(message.chat.id, "–ù–∞—á–∏–Ω–∞—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤...")
    
    series_list = get_all_series()
    if not series_list:
        bot.send_message(message.chat.id, "–ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤.")
        return
    
    success_count = 0
    fail_count = 0
    
    for series in series_list:
        series_id, url, title, last_updated, added_by, added_at = series
        topic_id = rutracker.get_topic_id(url)
        if not topic_id:
            continue
        
        # –¢–µ–≥ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞
        tag = f"id_{series_id}"
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–≥—Ä—É–∑–∫—É
        qbittorrent.delete_torrent_by_tag(tag, delete_files=False)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ—Ä—Ä–µ–Ω—Ç
        torrent_data = rutracker.download_torrent(topic_id)
        if torrent_data and qbittorrent.add_torrent(torrent_data, title, tags=tag):
            success_count += 1
        else:
            fail_count += 1
    
    bot.send_message(
        message.chat.id, 
        f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {success_count}, –° –æ—à–∏–±–∫–∞–º–∏: {fail_count}"
    )

@bot.message_handler(commands=['force_cl'])
@admin_required
def handle_force_cl(message):
    if qbittorrent.clear_category():
        bot.send_message(message.chat.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è 'from telegram' –æ—á–∏—â–µ–Ω–∞.")
    else:
        bot.send_message(
            message.chat.id,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ qBittorrent."
        )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –æ—á–∏—Å—Ç–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

@bot.message_handler(commands=['add'])
@admin_required
def handle_add(message):
    bot.send_message(
        message.chat.id,
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–∞–∑–¥–∞—á–∏ –Ω–∞ RuTracker."
    )
    user_states[message.from_user.id] = State.WAITING_FOR_URL
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞")

@bot.message_handler(commands=['users'])
@admin_required
def handle_users(message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    users = get_all_users()
    if not users:
        bot.send_message(message.chat.id, "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–æ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        return

    response = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user_id, username, is_admin in users:
        status = "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if is_admin else "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        response += f"{status}: {username} (ID: {user_id})\n"

    bot.send_message(message.chat.id, response)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@bot.message_handler(commands=['adduser'])
@admin_required
def handle_adduser(message):
    bot.send_message(
        message.chat.id,
        "–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è."
    )
    user_states[message.from_user.id] = State.WAITING_FOR_USER_ID
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@bot.message_handler(commands=['deluser'])
@admin_required
def handle_deluser(message):
    bot.send_message(
        message.chat.id,
        "–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
    )
    user_states[message.from_user.id] = State.WAITING_FOR_USER_ID_TO_DELETE
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@bot.message_handler(commands=['addadmin'])
@admin_required
def handle_addadmin(message):
    bot.send_message(
        message.chat.id,
        "–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    )
    user_states[message.from_user.id] = State.WAITING_FOR_ADMIN_ID
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

@bot.message_handler(func=lambda message: message.text and message.text.startswith('http'))
@admin_required
def handle_url(message):
    url = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ URL –Ω–∞ RuTracker
    if not rutracker.get_topic_id(url):
        bot.send_message(
            message.chat.id,
            "–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞–∑–¥–∞—á—É RuTracker. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Å–µ—Ä–∏–∞–ª
    if series_exists(url):
        bot.send_message(
            message.chat.id,
            "–≠—Ç–æ—Ç —Å–µ—Ä–∏–∞–ª —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    page_info = rutracker.get_page_info(url)
    if not page_info:
        bot.send_message(
            message.chat.id,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –¥–æ—Å—Ç—É–ø –∫ RuTracker."
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–∏–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    series_id = add_series(url, page_info["title"], page_info["last_updated"], message.from_user.id)
    if series_id:
        bot.send_message(
            message.chat.id,
            f"–°–µ—Ä–∏–∞–ª \"{page_info['title']}\" –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–≥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "id_XXX"
        tag = f"id_{series_id}"
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—Ä—Ä–µ–Ω—Ç
        torrent_data = rutracker.download_torrent(page_info["topic_id"])
        if torrent_data and qbittorrent.add_torrent(torrent_data, page_info["title"], tags=tag):
            bot.send_message(
                message.chat.id,
                "–¢–æ—Ä—Ä–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ qBittorrent."
            )
        else:
            bot.send_message(
                message.chat.id,
                "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ—Ä—Ä–µ–Ω—Ç –≤ qBittorrent."
            )
    else:
        bot.send_message(
            message.chat.id,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–∏–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."
        )
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –¥–æ–±–∞–≤–∏–ª —Å–µ—Ä–∏–∞–ª: {url}")


@bot.message_handler(func=lambda message: True)
@admin_required
def handle_text(message):
    user_id = message.from_user.id
    state = user_states.get(user_id, State.IDLE)
    
    if state == State.WAITING_FOR_URL:
        bot.send_message(
            message.chat.id,
            "–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ URL. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞–∑–¥–∞—á—É."
        )
        user_states[user_id] = State.IDLE
    
    elif state == State.WAITING_FOR_USER_ID:
        try:
            new_user_id = int(message.text.strip())
            if add_user(new_user_id, f"User_{new_user_id}"):
                bot.send_message(
                    message.chat.id,
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_user_id} –¥–æ–±–∞–≤–ª–µ–Ω."
                )
            else:
                bot.send_message(
                    message.chat.id,
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
                )
        except ValueError:
            bot.send_message(
                message.chat.id,
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ."
            )
        user_states[user_id] = State.IDLE
    
    elif state == State.WAITING_FOR_USER_ID_TO_DELETE:
        try:
            user_id_to_delete = int(message.text.strip())
            if remove_user(user_id_to_delete):
                bot.send_message(
                    message.chat.id,
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_delete} —É–¥–∞–ª—ë–Ω."
                )
            else:
                bot.send_message(
                    message.chat.id,
                    "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
                )
        except ValueError:
            bot.send_message(
                message.chat.id,
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ."
            )
        user_states[user_id] = State.IDLE
    
    elif state == State.WAITING_FOR_ADMIN_ID:
        try:
            admin_user_id = int(message.text.strip())
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user = get_user(admin_user_id)
            if not user:
                add_user(admin_user_id, f"Admin_{admin_user_id}", is_admin=True)
                bot.send_message(
                    message.chat.id,
                    f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {admin_user_id} –∏ –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                )
            elif make_admin(admin_user_id):
                bot.send_message(
                    message.chat.id,
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {admin_user_id} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä."
                )
            else:
                bot.send_message(
                    message.chat.id,
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
        except ValueError:
            bot.send_message(
                message.chat.id,
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ."
            )
        user_states[user_id] = State.IDLE
    
    else:
        bot.send_message(
            message.chat.id,
            "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith('update_'))
@admin_required
def handle_update_callback(call):
    series_id = int(call.data.split('_')[1])
    series = get_series(series_id=series_id)
    if not series:
        bot.send_message(call.message.chat.id, "–°–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    series_id, url, title, last_updated, added_by, added_at = series
    
    # –¢–µ–≥ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞
    tag = f"id_{series_id}"
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    page_info = rutracker.get_page_info(url)
    if not page_info:
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
        return
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–≥—Ä—É–∑–∫—É –≤ qBittorrent
    if not qbittorrent.delete_torrent_by_tag(tag, delete_files=False):
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Ç–æ—Ä—Ä–µ–Ω—Ç.")
        return
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ—Ä—Ä–µ–Ω—Ç
    torrent_data = rutracker.download_torrent(page_info["topic_id"])
    if torrent_data and qbittorrent.add_torrent(torrent_data, page_info["title"], tags=tag):
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        update_series(series_id, title=page_info["title"], last_updated=page_info["last_updated"])
        bot.answer_callback_query(call.id, "–°–µ—Ä–∏–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω –∏ —Ç–æ—Ä—Ä–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ qBittorrent.")
    else:
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–∏–∞–ª.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('update_'))
@admin_required
def handle_update_callback(call):
    series_id = int(call.data.split('_')[1])
    series = get_series(series_id=series_id)
    if not series:
        bot.send_message(call.message.chat.id, "–°–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    series_id, url, title, last_updated, added_by, added_at = series
    
    # –¢–µ–≥ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞
    tag = f"id_{series_id}"
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    page_info = rutracker.get_page_info(url)
    if not page_info:
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_result = update_series(series_id, title=page_info["title"], last_updated=page_info["last_updated"])
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—Ä—Ä–µ–Ω—Ç
    torrent_data = rutracker.download_torrent(page_info["topic_id"])
    if torrent_data and qbittorrent.add_torrent(torrent_data, page_info["title"], tags=tag):
        bot.answer_callback_query(call.id, "–°–µ—Ä–∏–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω –∏ —Ç–æ—Ä—Ä–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ qBittorrent.")
    else:
        bot.answer_callback_query(call.id, "–°–µ—Ä–∏–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ—Ä—Ä–µ–Ω—Ç.")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —á—Ç–æ-—Ç–æ
    if update_result and (page_info["title"] != title or page_info["last_updated"] != last_updated):
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"update_{series_id}"))
        markup.add(InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{series_id}"))
        markup.add(InlineKeyboardButton("üîó –°—Å—ã–ª–∫–∞", url=url))
        markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_list"))
        
        try:
            bot.edit_message_text(
                f"–°–µ—Ä–∏—è: {page_info['title']}\n"
                f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {page_info['last_updated']}\n"
                f"–î–æ–±–∞–≤–ª–µ–Ω–∞: {added_at}",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤—Å—ë –µ—â–µ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            bot.send_message(
                call.message.chat.id,
                f"–°–µ—Ä–∏—è: {page_info['title']}\n"
                f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {page_info['last_updated']}\n"
                f"–î–æ–±–∞–≤–ª–µ–Ω–∞: {added_at}",
                reply_markup=markup
            )
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π, –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º
        bot.answer_callback_query(call.id, "–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–∏–∞–ª–∞.")



@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
@admin_required
def handle_delete_callback(call):
    series_id = int(call.data.split('_')[1])
    
    # –¢–µ–≥ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞
    tag = f"id_{series_id}"
    
    # –£–¥–∞–ª—è–µ–º —Å–µ—Ä–∏–∞–ª –∏–∑ –ë–î
    if remove_series(series_id=series_id):
        # –£–¥–∞–ª—è–µ–º —Ç–æ—Ä—Ä–µ–Ω—Ç –ø–æ —Ç–µ–≥—É
        if qbittorrent.delete_torrent_by_tag(tag, delete_files=False):
            bot.answer_callback_query(call.id, "–°–µ—Ä–∏–∞–ª –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–æ—Ä—Ä–µ–Ω—Ç —É–¥–∞–ª–µ–Ω—ã.")
        else:
            bot.answer_callback_query(call.id, "–°–µ—Ä–∏–∞–ª —É–¥–∞–ª–µ–Ω, –Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–æ—Ä—Ä–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
        handle_list_callback(call)
    else:
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–µ—Ä–∏–∞–ª.")



@bot.callback_query_handler(func=lambda call: call.data == 'back_to_list')
@admin_required
def handle_list_callback(call):
    series_list = get_all_series()
    if not series_list:
        bot.edit_message_text(
            "–ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤.",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id
        )
        return

    markup = InlineKeyboardMarkup()
    for series in series_list:
        series_id, url, title, last_updated, added_by, added_at = series
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ "/"
        title_part = title.split('/')[0].strip()
        
        button_text = f"{title_part} - {last_updated}"
        markup.add(InlineKeyboardButton(button_text, callback_data=f"series_{series_id}"))

    bot.edit_message_text(
        "–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤:",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup
    )
